images {
    image: "madaudio-vertical.png" COMP;
    image: "madaudio-horizontal.png" COMP;
    image: "repeat-none-vertical.png" COMP;
    image: "repeat-all-vertical.png" COMP;
    image: "repeat-none-horizontal.png" COMP;
    image: "repeat-all-horizontal.png" COMP;
    image: "volume-0.png" COMP;
    image: "volume-0-v.png" COMP;
    image: "volume-10.png" COMP;
    image: "volume-10-v.png" COMP;
    image: "volume-20.png" COMP;
    image: "volume-20-v.png" COMP;
    image: "volume-30.png" COMP;
    image: "volume-30-v.png" COMP;
    image: "volume-40.png" COMP;
    image: "volume-40-v.png" COMP;
    image: "volume-50.png" COMP;
    image: "volume-50-v.png" COMP;
    image: "volume-60.png" COMP;
    image: "volume-60-v.png" COMP;
    image: "volume-70.png" COMP;
    image: "volume-70-v.png" COMP;
    image: "volume-80.png" COMP;
    image: "volume-80-v.png" COMP;
    image: "volume-90.png" COMP;
    image: "volume-90-v.png" COMP;
    image: "volume-100.png" COMP;
    image: "volume-100-v.png" COMP;
}

styles {
    style {
        name, "song_title";
        base, "font=sans:bold font_size=24 color=#000 align=middle"; 
    }
    style {
        name, "caption";
        base, "font=sans:bold font_size=24 color=#555 align=left"; 
    }
    style {
        name, "values";
        base, "font=sans font_size=22 color=#000 align=left"; 
    }
    style {
        name, "times";
        base, "font=sans font_size=24 color=#000 align=right"; 
    }
    style {
        name, "shaded";
        base, "font=sans font_size=24 color=#555 align=left"; 
    }
}


/* header and content for rotated */
#define BACKGROUND(LEFT_OFFSET, RIGHT_OFFSET)                    \
    part {                                                       \
    name, "background";                                          \
        type, RECT;                                              \
        description {                                            \
            state, "default" 0.0;                                \
            color, 0 0 0 255;                                    \
            rel1 { relative, 0.0 0.0; offset, LEFT_OFFSET 0; }   \
            rel2 { relative, 1.0 1.0; offset, RIGHT_OFFSET -1; } \
        }                                                        \
    }

#define HEADER_RECT                                                     \
    part {                                                              \
        name, "header";                                                 \
        type, RECT;                                                     \
        description {                                                   \
            state, "default" 0.0;                                       \
            color, 0 0 0 0;                                             \
            rel1 { to, "background"; relative, 0.0 0.0; offset, 0 0; }  \
            rel2 { to, "background"; relative, 1.0 0.0; offset, -1 49; } \
        }                                                               \
    }

#define CONTENTS_SWALLOW                                                \
    part {                                                              \
        name, "contents";                                               \
        type, SWALLOW;                                                  \
        description {                                                   \
            state, "default" 0.0;                                       \
            rel1 { to, "header"; relative, 0.0 1.0; offset, 0 -1; }     \
            rel2 { to, "background"; relative, 1.0 1.0; offset, -1 -1; } \
        }                                                               \
    }


#define CAPTION_X1 14
#define CAPTION_X2 200
#define VALUES_X1 214
#define VALUES_X2 480

#define COMPOSER_Y1 20
#define COMPOSER_Y2 48
#define ARTIST_Y1   53
#define ARTIST_Y2   81
#define ALBUM_Y1    86
#define ALBUM_Y2    114
#define GENRE_Y1    119
#define GENRE_Y2    147
#define YEAR_Y1     152
#define YEAR_Y2     180


#define SONG(x1, y1, x2, y2) \
    part { \
        name, "title"; \
        type, TEXTBLOCK; \
        mouse_events, 0; \
        description { \
            state, "default" 0.0; \
            color, 0 0 0 255; \
            text { \
                style, "song_title"; \
                max, 0 1; \
            } \
            align, 0.5 0.5; \
            rel1 { relative, 0.0 0.0; offset, x1 y1; } \
            rel2 { relative, 0.0 0.0; offset, x2 y2; } \
        } \
    }

#define CLIPPER(c, x1, y1, x2, y2)                        \
   part {                                                 \
      name, c;                                    \
      type, RECT;                                         \
      description {                                       \
         state, "default" 0.0;                            \
         color, 255 255 255 255;                            \
         rel1 { relative, 0.0 0.0; offset, x1 y1; }         \
         rel2 { relative, 0.0 0.0; offset, x2 y2; }       \
      } \
    }

#define STYLED(n, s, c, x1, y1, x2, y2) \
    part { \
        name, n; \
        type, TEXTBLOCK; \
        mouse_events, 0; \
        clip_to, c; \
        description { \
            state, "default" 0.0; \
            color, 0 0 0 255; \
            text { \
                style, s; \
                max, 0 1; \
            } \
            align, 0.5 0.5; \
            rel1 { relative, 0.0 0.0; to, c; offset, x1 y1; } \
            rel2 { relative, 0.0 0.0; to, c; offset, x2 y2; } \
        } \
    }

#define TIME(n, s, c, x1, y1, x2, y2) \
    part { \
        name, n; \
        type, TEXTBLOCK; \
        mouse_events, 0; \
        clip_to, c; \
        description { \
            state, "default" 0.0; \
            color, 0 0 0 255; \
            text { \
                style, s; \
                max, 0 1; \
            } \
            align, 0.5 0.5; \
            rel1 { relative, 0.0 0.0; to, c; offset, x1 y1; } \
            rel2 { relative, 0.0 0.0; to, c; offset, x2 y2; } \
        } \
    }

#define CAPTION(n, y1, y2) \
    STYLED(n, "caption", "clipper", CAPTION_X1, y1, CAPTION_X2, y2)

#define VALUE(n, y1, y2) \
    STYLED(n, "values", "clipper", VALUES_X1, y1, VALUES_X2, y2)

#define PREVNEXT(x1, y1, x2, y2) \
    CLIPPER("prev-next-clipper", x1, y1, x2, y2)  \
    STYLED("prev-song", "shaded", "prev-next-clipper", 10, 5, 350, 30) \
    STYLED("this-song", "values", "prev-next-clipper", 10, 36, 350, 64) \
    STYLED("next-song", "shaded", "prev-next-clipper", 10, 68, 350, 103)


#define BLOCK(x1, y1, x2, y2) \
    CLIPPER("clipper", x1, y1, x2, y2)  \
    CAPTION("caption-composer", COMPOSER_Y1, COMPOSER_Y2) \
    CAPTION("caption-artist", ARTIST_Y1, ARTIST_Y2) \
    CAPTION("caption-album", ALBUM_Y1, ALBUM_Y2) \
    CAPTION("caption-genre", GENRE_Y1, GENRE_Y2) \
    CAPTION("caption-year", YEAR_Y1, YEAR_Y2) \
    VALUE("composer", COMPOSER_Y1, COMPOSER_Y2 ) \
    VALUE("artist", ARTIST_Y1, ARTIST_Y2) \
    VALUE("album", ALBUM_Y1, ALBUM_Y2) \
    VALUE("genre", GENRE_Y1, GENRE_Y2) \
    VALUE("year", YEAR_Y1, YEAR_Y2) \
    STYLED("total_time", "times", "clipper", VALUES_X1, 200, VALUES_X2, 230) 

#define BUTTON(n, x1, y1, x2, y2, image1, image2) \
    part { \
        name, n; \
        type, IMAGE; \
        mouse_events, 0; \
        description { \
            state, "default" 0.0; \
            rel1 { relative, 0.0 0.0; to, "background"; offset, x1 y1; } \
            rel2  {relative, 0.0 0.0; to, "background"; offset, x2 y2; } \
            image { normal, image1; } \
        } \
        description { \
            state, "pressed" 0.0; \
            inherit, "default" 0.0; \
            image { normal, image2; } \
        } \
    }

#define BUTTON_PROG(name1, name_len, signal_name)           \
            program {                                       \
                name, name1;                                \
                signal, signal_name;                        \
                                                            \
                script {                                    \
                    new name_arg[100], name[100];           \
                    getsarg(0, name_arg, 100);              \
                    strcut(name, name_arg, name_len, 100);  \
                                                            \
                    set_state(PART:name1, name, 0.0);       \
                }                                           \
            }


#define VOLUME_STATE(name, file)                              \
        description {                                   \
            state, name 0.0;                                \
            inherit, "default" 0.0;                     \
            image { normal, file; }   \
        }

#define VOLUME(r1, r2, x1, y1, x2, y2,                                        \
        f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10)                          \
        part {                                                                \
            name, "volume";                                                   \
            type, IMAGE;                                                      \
            mouse_events, 0;                                                  \
            description  {                                                    \
                state, "default" 0.0;                                         \
                rel1 { to, "background"; relative, r1 r2; offset, x1  y1; }   \
                rel2 { to, "background"; relative, r1 r2; offset, x2  y2; }   \
                image {                                                       \
                    normal, f0;                                               \
                }                                                             \
            }                                                                 \
            VOLUME_STATE("volume-0", f0)                                      \
            VOLUME_STATE("volume-10", f1)                                     \
            VOLUME_STATE("volume-20", f2)                                     \
            VOLUME_STATE("volume-30", f3)                                     \
            VOLUME_STATE("volume-40", f4)                                     \
            VOLUME_STATE("volume-50", f5)                                     \
            VOLUME_STATE("volume-60", f6)                                     \
            VOLUME_STATE("volume-70", f7)                                     \
            VOLUME_STATE("volume-80", f8)                                     \
            VOLUME_STATE("volume-90", f9)                                     \
            VOLUME_STATE("volume-100", f10)                                   \
        }
            
#define VOLUME_PROG() \
               program {                                                \
                name, "volume-level";                                   \
                signal, "volume-level,*";                               \
                script {                                                \
                    new level_arg[100];                                 \
                    getsarg(0, level_arg, 100);                         \
                    new level_s[100];                                   \
                    strcut(level_s, level_arg, 13, 100);                \
                    new level = atoi(level_s);                          \
                                                                        \
                    new z[100];                                         \
                    snprintf(z, 100, "%d", level);                      \
                                                                        \
                                                                        \
                    if(level > 90)                                      \
                        set_state(PART:"volume", "volume-100", 0.0);    \
                    else if(level > 80)                                 \
                        set_state(PART:"volume", "volume-90", 0.0);     \
                    else if(level > 70)                                 \
                        set_state(PART:"volume", "volume-80", 0.0);     \
                    else if(level > 60)                                 \
                        set_state(PART:"volume", "volume-70", 0.0);     \
                    else if(level > 50)                                 \
                        set_state(PART:"volume", "volume-60", 0.0);     \
                    else if(level > 40)                                 \
                        set_state(PART:"volume", "volume-50", 0.0);     \
                    else if(level > 30)                                 \
                        set_state(PART:"volume", "volume-40", 0.0);     \
                    else if(level > 20)                                 \
                        set_state(PART:"volume", "volume-30", 0.0);     \
                    else if(level > 10)                                 \
                        set_state(PART:"volume", "volume-20", 0.0);     \
                    else if(level >  0)                                 \
                        set_state(PART:"volume", "volume-10", 0.0);     \
                    else                                                \
                        set_state(PART:"volume", "volume-0", 0.0);      \
                }                                                       \
            }

collections {
    group {
        name, "main_edje";
        parts {
            BACKGROUND(0,-1)
            HEADER_RECT
            part {
                name, "clock";
                type, TEXT;
                description {
                    state, "default" 0.0;
                    color, 255 255 255 255;
                    text {
                        font, sans-serif;
                        size, 28;
                        align, 1.0 0.5;
                    }
                    rel1 { to, "header"; relative, 1.0 0.0; offset, -100 0; }
                    rel2 { to, "header"; relative, 1.0 1.0; offset, -10 -1; }
                }
            }
            CONTENTS_SWALLOW
        }
    }
    group {
        name, "vertical";
        parts {
            part {
                name, "background";
                type, IMAGE;
                description {
                    state, "default" 0.0;
                    rel1 { relative, 0.0 0.0; offset, 0 0; }
                    rel2 { relative, 1.0 1.0; offset, -1 -1; }
                    image { normal, "madaudio-vertical.png"; }
                }
            }
            SONG(110, 33, 595, 66) 
            BLOCK(110, 76, 595, 306)
            PREVNEXT(110, 326, 595, 423) 
            BUTTON("cycle", 0, 15, 102, 89, 
                "repeat-none-vertical.png", "repeat-all-vertical.png")
            VOLUME(1.0, 1.0, -161, -250, -46, -151,
                "volume-0.png",
                "volume-10.png",
                "volume-20.png",
                "volume-30.png",
                "volume-40.png",
                "volume-50.png",
                "volume-60.png",
                "volume-70.png",
                "volume-80.png",
                "volume-90.png",
                "volume-100.png"
                )
        }
        programs {
            BUTTON_PROG("cycle", 6, "cycle,*")
            VOLUME_PROG()
        }
    }

    group {
        name, "horizontal";
        parts {
            part {
                name, "background";
                type, IMAGE;
                description {
                    state, "default" 0.0;
                    rel1 { relative, 0.0 0.0; offset, 0 0; }
                    rel2 { relative, 1.0 1.0; offset, -1 -1; }
                    image { normal, "madaudio-horizontal.png"; }
                }
            }
            SONG(5, 32, 487, 64)
            BLOCK(5, 80, 487, 310)
            PREVNEXT(36, 319, 487, 516)
            BUTTON("cycle", 51, 451, 125, 547, 
                "repeat-none-horizontal.png", "repeat-all-horizontal.png")
            VOLUME(1.0, 0.0, -271, 45, -172, 160, 
                "volume-0-v.png",
                "volume-10-v.png",
                "volume-20-v.png",
                "volume-30-v.png",
                "volume-40-v.png",
                "volume-50-v.png",
                "volume-60-v.png",
                "volume-70-v.png",
                "volume-80-v.png",
                "volume-90-v.png",
                "volume-100-v.png"
                )
        }
        programs {
            BUTTON_PROG("cycle", 6, "cycle,*")
            VOLUME_PROG()
        }
    } 
}
