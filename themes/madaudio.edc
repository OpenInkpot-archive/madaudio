images {
    image: "madaudio-vertical.png" COMP;
    image: "madaudio-horizontal.png" COMP;
    image: "madaudio-play.png" COMP;
    image: "madaudio-pause.png" COMP;
    image: "repeat-none-vertical.png" COMP;
    image: "repeat-all-vertical.png" COMP;
    image: "repeat-none-horizontal.png" COMP;
    image: "repeat-all-horizontal.png" COMP;
    image: "play-one-horizontal.png" COMP;
    image: "play-one-vertical.png" COMP;
    image: "play-full-horizontal.png" COMP;
    image: "play-full-vertical.png" COMP;
    image: "volume-0.png" COMP;
    image: "volume-0-v.png" COMP;
    image: "volume-10.png" COMP;
    image: "volume-10-v.png" COMP;
    image: "volume-20.png" COMP;
    image: "volume-20-v.png" COMP;
    image: "volume-30.png" COMP;
    image: "volume-30-v.png" COMP;
    image: "volume-40.png" COMP;
    image: "volume-40-v.png" COMP;
    image: "volume-50.png" COMP;
    image: "volume-50-v.png" COMP;
    image: "volume-60.png" COMP;
    image: "volume-60-v.png" COMP;
    image: "volume-70.png" COMP;
    image: "volume-70-v.png" COMP;
    image: "volume-80.png" COMP;
    image: "volume-80-v.png" COMP;
    image: "volume-90.png" COMP;
    image: "volume-90-v.png" COMP;
    image: "volume-100.png" COMP;
    image: "volume-100-v.png" COMP;

    image: "forward-1.png" COMP;
    image: "forward-10.png" COMP;
    image: "backward-1.png" COMP;
    image: "backward-10.png" COMP;
    image: "button-folder.png" COMP;

    image: "dict_bg.png" COMP;
    image: "dict_bg_h.png" COMP;
    image: "microphone.png" COMP;
    image: "dict_record.png" COMP;
    image: "dict_pause.png" COMP;
}

styles {
    style {
        name, "song_title";
        base, "font=sans:bold font_size=24 color=#000 align=middle"; 
    }
    style {
        name, "caption";
        base, "font=sans:bold font_size=24 color=#555 align=left"; 
    }
    style {
        name, "values";
        base, "font=sans font_size=22 color=#000 align=left"; 
    }
    style {
        name, "times";
        base, "font=sans font_size=24 color=#000 align=right"; 
    }
    style {
        name, "centered";
        base, "font=sans font_size=24 color=#000 align=center"; 
    }
    style {
        name, "playlist";
        base, "font=sans font_size=24 color=#000 align=left"; 
    }
    style {
        name, "shaded";
        base, "font=sans font_size=24 color=#555 align=left"; 
    }
}


/* header and content for rotated */
#define BACKGROUND(LEFT_OFFSET, RIGHT_OFFSET)                    \
    part {                                                       \
    name, "background";                                          \
        type, RECT;                                              \
        description {                                            \
            state, "default" 0.0;                                \
            color, 0 0 0 255;                                    \
            rel1 { relative, 0.0 0.0; offset, LEFT_OFFSET 0; }   \
            rel2 { relative, 1.0 1.0; offset, RIGHT_OFFSET -1; } \
        }                                                        \
    }

#define HEADER_RECT                                                     \
    part {                                                              \
        name, "header";                                                 \
        type, RECT;                                                     \
        description {                                                   \
            state, "default" 0.0;                                       \
            color, 0 0 0 0;                                             \
            rel1 { to, "background"; relative, 0.0 0.0; offset, 0 0; }  \
            rel2 { to, "background"; relative, 1.0 0.0; offset, -1 49; } \
        }                                                               \
    }

#define CONTENTS_SWALLOW                                                \
    part {                                                              \
        name, "contents";                                               \
        type, SWALLOW;                                                  \
        description {                                                   \
            state, "default" 0.0;                                       \
            rel1 { to, "header"; relative, 0.0 1.0; offset, 0 -1; }     \
            rel2 { to, "background"; relative, 1.0 1.0; offset, -1 -1; } \
        }                                                               \
    }

#define METER_SWALLOW(c, x1, y1, x2, y2)                                   \
    part {                                                              \
        name, "meter";                                                  \
        type, SWALLOW;                                                  \
        description {                                                   \
            state, "default" 0.0;                                       \
            rel1 { to, c; relative, 0.0 1.0; offset, x1 y1; }     \
            rel2 { to, c; relative, 0.0 1.0; offset, x2 y2; } \
        }                                                               \
    }

#define CAPTION_X1 14
#define CAPTION_X2 200
#define VALUES_X1 214
#define VALUES_X2 480

#define COMPOSER_Y1 20
#define COMPOSER_Y2 48
#define ARTIST_Y1   53
#define ARTIST_Y2   81
#define ALBUM_Y1    86
#define ALBUM_Y2    114
#define GENRE_Y1    119
#define GENRE_Y2    147
#define YEAR_Y1     152
#define YEAR_Y2     180


#define SONG(x1, y1, x2, y2) \
    part { \
        name, "title"; \
        type, TEXT; \
        mouse_events, 0; \
        description { \
            state, "default" 0.0; \
            color, 0 0 0 255; \
            text { \
                text, ""; \
                font, "sans-serif"; \
                size, 24; \
                align, 0.0 0.5; \
                elipsis, 0.0; \
            } \
            rel1 { relative, 0.0 0.0; offset, x1 y1; } \
            rel2 { relative, 0.0 0.0; offset, x2 y2; } \
        } \
    }

#define CLIPPER(c, x1, y1, x2, y2)                        \
   part {                                                 \
      name, c;                                    \
      type, RECT;                                         \
      description {                                       \
         state, "default" 0.0;                            \
         color, 255 255 255 255;                            \
         rel1 { relative, 0.0 0.0; offset, x1 y1; }         \
         rel2 { relative, 0.0 0.0; offset, x2 y2; }       \
      } \
    }

#define STYLED_REL(n, s, c, x1, y1, x2, y2, rx, ry) \
    part { \
        name, n; \
        type, TEXTBLOCK; \
        mouse_events, 0; \
        clip_to, c; \
        description { \
            state, "default" 0.0; \
            color, 0 0 0 255; \
            text { \
                style, s; \
                max, 0 1; \
            } \
            align, 0.5 0.5; \
            rel1 { relative, rx ry; to, c; offset, x1 y1; } \
            rel2 { relative, rx ry; to, c; offset, x2 y2; } \
        } \
    }

#define STYLED(n, s, c, x1, y1, x2, y2) \
    STYLED_REL(n, s, c, x1, y1, x2, y2, 0.0, 0.0)

#define CAPTION(n, y1, y2) \
    STYLED(n, "caption", "clipper", CAPTION_X1, y1, CAPTION_X2, y2)

#define VALUE_TEXT(n, c, x1, y1, x2, y2) \
    part { \
        name, n; \
        type, TEXT; \
        mouse_events, 0; \
        description { \
            state, "default" 0.0; \
            color, 0 0 0 255; \
            text { \
                text, ""; \
                font, "sans-serif"; \
                size, 22; \
                align, 0.0 0.5; \
                elipsis, 0.0; \
            } \
            rel1 { relative, 0.0 0.0; to, c; offset, x1 y1; } \
            rel2 { relative, 0.0 0.0; to, c; offset, x2 y2; } \
        } \
    }

#define VALUE(n, y1, y2) \
    VALUE_TEXT(n, "clipper", VALUES_X1, y1, VALUES_X2, y2)

#define PREVNEXT(x1, y1, x2, y2) \
    CLIPPER("prev-next-clipper", x1, y1, x2, y2)  \
    STYLED("prev-song", "shaded", "prev-next-clipper", 10, 5, 450, 30) \
    STYLED("this-song", "values", "prev-next-clipper", 10, 36, 450, 64) \
    STYLED("next-song", "shaded", "prev-next-clipper", 10, 68, 450, 103)


#define BLOCK(x1, y1, x2, y2) \
    CLIPPER("clipper", x1, y1, x2, y2)  \
    CAPTION("caption-composer", COMPOSER_Y1, COMPOSER_Y2) \
    CAPTION("caption-artist", ARTIST_Y1, ARTIST_Y2) \
    CAPTION("caption-album", ALBUM_Y1, ALBUM_Y2) \
    CAPTION("caption-genre", GENRE_Y1, GENRE_Y2) \
    CAPTION("caption-year", YEAR_Y1, YEAR_Y2) \
    VALUE("composer", COMPOSER_Y1, COMPOSER_Y2 ) \
    VALUE("artist", ARTIST_Y1, ARTIST_Y2) \
    VALUE("album", ALBUM_Y1, ALBUM_Y2) \
    VALUE("genre", GENRE_Y1, GENRE_Y2) \
    VALUE("year", YEAR_Y1, YEAR_Y2) \
    STYLED_REL("total_time", "times", "clipper", \
        300, -40, VALUES_X2, -15, 0.0, 1.0) \
    METER_SWALLOW("clipper", 15, -25, 290, -15)


#define BUTTON(n, x1, y1, x2, y2, image1, image2) \
    part { \
        name, n; \
        type, IMAGE; \
        mouse_events, 0; \
        description { \
            state, "default" 0.0; \
            rel1 { relative, 0.0 0.0; to, "background"; offset, x1 y1; } \
            rel2  {relative, 0.0 0.0; to, "background"; offset, x2 y2; } \
            image { normal, image1; } \
        } \
        description { \
            state, "pressed" 0.0; \
            inherit, "default" 0.0; \
            image { normal, image2; } \
        } \
    }

#define BUTTON_PROG(name1, name_len, signal_name)           \
            program {                                       \
                name, name1;                                \
                signal, signal_name;                        \
                                                            \
                script {                                    \
                    new name_arg[100], name[100];           \
                    getsarg(0, name_arg, 100);              \
                    strcut(name, name_arg, name_len, 100);  \
                                                            \
                    set_state(PART:name1, name, 0.0);       \
                }                                           \
            }

#define EXT_CLIPPER(part_name, x1, y1, x2, y2)                      \
    part {                                                          \
        name, part_name;                                            \
        type, RECT;                                                 \
        description {                                               \
            state, "default" 0.0;                                   \
            color, 0 0 0 0;                                         \
            rel1 { relative, 0.0 0.0; to, clipper; offset, x1 y1; } \
            rel2  {relative, 0.0 0.0; to, clipper; offset, x2 y2; } \
        }                                                           \
        description {                                               \
            state, "visible" 0.0;                                   \
            inherit, "default" 0.0;                                 \
            color, 255 255 255 255;                                 \
        }                                                           \
    }

#define EXT_BUTTON(part_name, clipper, base, x1, y1, x2, y2, rx, ry, image_name)  \
    part {                                                          \
        name, part_name;                                            \
        type, IMAGE;                                                \
        mouse_events, 0;                                            \
        clip_to, clipper;                                           \
        description {                                               \
            state, "default" 0.0;                                   \
            color, 255 255 255 255;                                 \
            rel1 { relative, rx ry; to, base; offset, x1 y1; }      \
            rel2 { relative, rx ry; to, base; offset, x2 y2; }      \
            image { normal, image_name; }                           \
        }                                                           \
    }

#define EXT_PROGRAM(part_name, signal_name, state_name)             \
    program {                                                       \
        name, signal_name;                                          \
        signal, signal_name;                                        \
        action, STATE_SET state_name 0.0;                           \
        target, part_name;                                          \
    }

#define VOLUME_STATE(name, file)                              \
        description {                                   \
            state, name 0.0;                                \
            inherit, "default" 0.0;                     \
            image { normal, file; }   \
        }

#define VOLUME(r1, r2, x1, y1, x2, y2,                                        \
        f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10)                          \
        part {                                                                \
            name, "volume";                                                   \
            type, IMAGE;                                                      \
            mouse_events, 0;                                                  \
            description  {                                                    \
                state, "default" 0.0;                                         \
                rel1 { to, "background"; relative, r1 r2; offset, x1  y1; }   \
                rel2 { to, "background"; relative, r1 r2; offset, x2  y2; }   \
                image {                                                       \
                    normal, f0;                                               \
                }                                                             \
            }                                                                 \
            VOLUME_STATE("volume-0", f0)                                      \
            VOLUME_STATE("volume-10", f1)                                     \
            VOLUME_STATE("volume-20", f2)                                     \
            VOLUME_STATE("volume-30", f3)                                     \
            VOLUME_STATE("volume-40", f4)                                     \
            VOLUME_STATE("volume-50", f5)                                     \
            VOLUME_STATE("volume-60", f6)                                     \
            VOLUME_STATE("volume-70", f7)                                     \
            VOLUME_STATE("volume-80", f8)                                     \
            VOLUME_STATE("volume-90", f9)                                     \
            VOLUME_STATE("volume-100", f10)                                   \
        }
            
#define VOLUME_PROG() \
               program {                                                \
                name, "volume-level";                                   \
                signal, "volume-level,*";                               \
                script {                                                \
                    new level_arg[100];                                 \
                    getsarg(0, level_arg, 100);                         \
                    new level_s[100];                                   \
                    strcut(level_s, level_arg, 13, 100);                \
                    new level = atoi(level_s);                          \
                                                                        \
                    new z[100];                                         \
                    snprintf(z, 100, "%d", level);                      \
                                                                        \
                                                                        \
                    if(level > 90)                                      \
                        set_state(PART:"volume", "volume-100", 0.0);    \
                    else if(level > 80)                                 \
                        set_state(PART:"volume", "volume-90", 0.0);     \
                    else if(level > 70)                                 \
                        set_state(PART:"volume", "volume-80", 0.0);     \
                    else if(level > 60)                                 \
                        set_state(PART:"volume", "volume-70", 0.0);     \
                    else if(level > 50)                                 \
                        set_state(PART:"volume", "volume-60", 0.0);     \
                    else if(level > 40)                                 \
                        set_state(PART:"volume", "volume-50", 0.0);     \
                    else if(level > 30)                                 \
                        set_state(PART:"volume", "volume-40", 0.0);     \
                    else if(level > 20)                                 \
                        set_state(PART:"volume", "volume-30", 0.0);     \
                    else if(level > 10)                                 \
                        set_state(PART:"volume", "volume-20", 0.0);     \
                    else if(level >  0)                                 \
                        set_state(PART:"volume", "volume-10", 0.0);     \
                    else                                                \
                        set_state(PART:"volume", "volume-0", 0.0);      \
                }                                                       \
            }

collections {
    group {
        name, "vertical";
        parts {
            part {
                name, "background";
                type, IMAGE;
                description {
                    state, "default" 0.0;
                    rel1 { relative, 0.0 0.0; offset, 0 0; }
                    rel2 { relative, 1.0 1.0; offset, -1 -1; }
                    image { normal, "madaudio-vertical.png"; }
                }
            }
            SONG(124, 33, 581, 66) 
            BLOCK(110, 76, 595, 308)

            /* Prev/Next Box */
            CLIPPER("prev-next-clipper", 130, 317, 595, 424)
            STYLED("prev-song", "shaded", "prev-next-clipper", 15, 5, 450, 35)
            STYLED("this-song", "playlist", "prev-next-clipper", 15, 39, 450, 66)
            STYLED("next-song", "shaded", "prev-next-clipper", 15, 67, 450, 103)

            BUTTON("cycle", 0, 2, 102, 76, 
                "repeat-none-vertical.png", "repeat-all-vertical.png")
            BUTTON("full", 0, 80, 102, 154,
                "play-one-vertical.png", "play-full-vertical.png")
            BUTTON("playpause", 123, 363, 134, 383,
                "madaudio-pause.png", "madaudio-play.png")
            VOLUME(1.0, 1.0, -161, -250, -46, -151,
                "volume-0.png",
                "volume-10.png",
                "volume-20.png",
                "volume-30.png",
                "volume-40.png",
                "volume-50.png",
                "volume-60.png",
                "volume-70.png",
                "volume-80.png",
                "volume-90.png",
                "volume-100.png"
                )


            /* Extended controls */
            part {
                name, "extended-controls";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    color, 0 0 0 0; 
                    rel1 { relative, 0.0 0.0; offset, 0 310; }
                    rel2  {relative, 0.0 1.0;  offset, 102 -1; }
                }
                description {
                    state, "visible" 0.0;
                    inherit, "default" 0.0;
                    color, 255 255 255 255;
                }
            }

            EXT_BUTTON("forward1", "extended-controls", "extended-controls",
                0, 0, 102, 74, 0.0, 0.0, "forward-1.png")
            EXT_BUTTON("backward1", "extended-controls", "forward1",
                0, 6, 102, 80, 0.0, 1.0, "backward-1.png")
            EXT_BUTTON("forward10", "extended-controls", "backward1",
                0, 6, 102, 80, 0.0, 1.0, "forward-10.png")
            EXT_BUTTON("backward10", "extended-controls", "forward10",
                0, 6, 102, 80, 0.0, 1.0, "backward-10.png")
            EXT_BUTTON("folder", "extended-controls", "backward10",
                0, 6, 102, 80, 0.0, 1.0, "button-folder.png")

            part {
                name, "recorder-controls";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    color, 0 0 0 0; 
                    rel1 { relative, 0.0 0.0; offset, 109 432; }
                    rel2  {relative, 1.0 1.0;  offset, -1 -1; }
                }
                description {
                    state, "visible" 0.0;
                    inherit, "default" 0.0;
                    color, 255 255 255 255;
                }
            }
            part {
                name, "recorder-window";
                type, RECT;
                clip_to, "recorder-controls";
                description {
                    state, "default" 0.0;
                    color, 210 210 210 255;
                    rel1 { to, "recorder-controls"; }
                    rel2 { to, "recorder-controls"; }
                }
            }
            part {
                name, "recorder-window-background";
                type, IMAGE;
                clip_to, "recorder-controls";
                description {
                    state, "default" 0.0;
                    rel1 { to, "recorder-controls"; relative, 0.0 0.0; offset, 0 0; }
                    rel2 { to, "recorder-controls"; relative, 1.0 0.0; offset, -1 72; }
                    image { normal, "dict_bg.png"; }
                }
            }
            part {
                name, "recorder-title"; 
                type, TEXTBLOCK;
                clip_to, "recorder-controls";
                description {
                    color, 0 0 0 255;
                    text {
                        max, 0 1;
                        style, "centered";
                    }
                    align, 0.5 0.5;
                    rel1 { relative, 0.0 0.0; offset, 0 15; to, "recorder-controls"; }
                    rel2 { relative, 1.0 0.0; offset, 0 50; to, "recorder-controls"; }
                }
            }
            part {
                name, "recorder-help"; 
                type, TEXTBLOCK;
                clip_to, "recorder-controls";
                description {
                    color, 0 0 0 255;
                    text {
                        max, 0 1;
                        style, "centered";
                    }
                    align, 0.5 0.5;
                    rel1 { relative, 0.0 1.0; offset, 0 -50; to, "recorder-controls"; }
                    rel2 { relative, 1.0 1.0; offset, 0 -15; to, "recorder-controls"; }
                }
            }
            part {
                name, "microphone-icon";
                type, IMAGE;
                clip_to, "recorder-controls";
                description {
                    state, "default" 0.0;
                    color, 255 255 255 255;
                    rel1 { to, "recorder-controls"; relative, 0.0 0.0;
                        offset, 6 91; }
                    rel2 { to, "recorder-controls"; relative, 0.0 0.0;
                       offset, 121 223; }
                    image { normal, "microphone.png"; }
                }
            }
            part {
                name, "recorder-button";
                type, IMAGE;
                clip_to, "recorder-controls";
                description {
                    color, 255 255 255 255;
                    state, "default" 0.0;
                    
                    rel1 { to, "recorder-controls"; relative, 0.0 0.0;
                        offset, 274 99; }
                    rel2 { to, "recorder-controls"; relative, 0.0 0.0;
                       offset, 319 144; }
                    image {
                        normal, "dict_record.png";
                    }
                }
                description {
                    state, "pause" 0.0;
                    inherit, "default" 0.0;
                    image { normal, "dict_pause.png"; }
                }
            }
        }
        programs {
            BUTTON_PROG("cycle", 6, "cycle,*")
            BUTTON_PROG("full", 5, "full,*")
            BUTTON_PROG("playpause", 10, "playpause,*")
            VOLUME_PROG()
            EXT_PROGRAM("extended-controls",
                        "show-extended-controls",
                        "visible")
            EXT_PROGRAM("extended-controls",
                        "hide-extended-controls",
                        "default")
            EXT_PROGRAM("recorder-controls",
                        "show-recorder-controls",
                        "visible")
            EXT_PROGRAM("recorder-controls",
                        "hide-recorder-controls",
                        "default") 
            program {
                name, "recording-start";
                signal, "recording-button";
                source, "start";
                action, STATE_SET "pause" 0.0;
                target, "recorder-button";
            }
            program {
                name, "recording-stop";
                signal, "recording-button";
                source, "stop";
                action, STATE_SET "default" 0.0;
                target, "recorder-button";
            }
        }
    }

    group {
        name, "horizontal";
        parts {
            part {
                name, "background";
                type, IMAGE;
                description {
                    state, "default" 0.0;
                    rel1 { relative, 0.0 0.0; offset, 0 0; }
                    rel2 { relative, 1.0 1.0; offset, -1 -1; }
                    image { normal, "madaudio-horizontal.png"; }
                }
            }
            SONG(19, 32, 473, 64)
            BLOCK(5, 80, 487, 310)

            /* Prev/Next Box */
            CLIPPER("prev-next-clipper", 36, 319, 487, 516)
            STYLED("prev-song", "shaded", "prev-next-clipper", 10, 5, 450, 30)
            STYLED("this-song", "playlist", "prev-next-clipper", 10, 36, 450, 64)
            STYLED("next-song", "shaded", "prev-next-clipper", 10, 68, 450, 103)

            BUTTON("cycle", 50, 451, 124, 551, 
                "repeat-none-horizontal.png", "repeat-all-horizontal.png")
            BUTTON("full", 128, 451, 202, 551,
                "play-one-horizontal.png", "play-full-horizontal.png")
            BUTTON("playpause", 18, 364, 29, 384,
                "madaudio-pause.png", "madaudio-play.png")
            VOLUME(1.0, 0.0, -271, 45, -172, 160, 
                "volume-0-v.png",
                "volume-10-v.png",
                "volume-20-v.png",
                "volume-30-v.png",
                "volume-40-v.png",
                "volume-50-v.png",
                "volume-60-v.png",
                "volume-70-v.png",
                "volume-80-v.png",
                "volume-90-v.png",
                "volume-100-v.png"
                )
        }
        programs {
            BUTTON_PROG("cycle", 6, "cycle,*")
            BUTTON_PROG("full", 5, "full,*")
            BUTTON_PROG("playpause", 10, "playpause,*")
            VOLUME_PROG()
        }
    } 
}
